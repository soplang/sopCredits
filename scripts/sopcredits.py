#!/usr/bin/env python3

import os
import requests
from collections import defaultdict
from datetime import datetime


def get_github_token():
    """Get GitHub token from environment variable."""
    token = os.environ.get('GITHUB_TOKEN')
    if not token:
        raise ValueError("GITHUB_TOKEN environment variable is not set")
    return token


def get_organization_repos(org_name, token):
    """Get all public repositories for the organization."""
    headers = {
        'Authorization': f'token {token}',
        'Accept': 'application/vnd.github.v3+json'
    }

    repos = []
    page = 1

    while True:
        response = requests.get(
            f'https://api.github.com/orgs/{org_name}/repos?type=public&per_page=100&page={page}',
            headers=headers
        )
        response.raise_for_status()

        page_repos = response.json()
        if not page_repos:
            break

        repos.extend([repo for repo in page_repos if not repo['private']])
        page += 1

    return repos


def get_repo_contributors(org_name, repo_name, token):
    """Get all contributors for a repository."""
    headers = {
        'Authorization': f'token {token}',
        'Accept': 'application/vnd.github.v3+json'
    }

    contributors = []
    page = 1

    while True:
        url = f'https://api.github.com/repos/{org_name}/{repo_name}/contributors?per_page=100&page={page}'
        response = requests.get(url, headers=headers)

        if response.status_code == 404:
            print(f"Repository {repo_name} not found or no contributors")
            return []

        response.raise_for_status()

        page_contributors = response.json()
        if not page_contributors:
            break

        contributors.extend(page_contributors)
        page += 1

    return contributors


def aggregate_contributor_data(org_name, token):
    """Aggregate contributor data across all repositories."""
    print(f"Fetching repositories for {org_name}...")
    repos = get_organization_repos(org_name, token)
    print(f"Found {len(repos)} repositories")

    contributors_data = defaultdict(lambda: {
        'login': '',
        'avatar_url': '',
        'html_url': '',
        'total_commits': 0,
        'repos': []
    })

    # List of bot users to exclude
    bots = ['dependabot', 'dependabot-preview',
            'github-actions', 'github-actions[bot]']

    for repo in repos:
        repo_name = repo['name']
        print(f"Processing contributors for {repo_name}...")

        repo_contributors = get_repo_contributors(org_name, repo_name, token)

        for contributor in repo_contributors:
            login = contributor['login']

            # Skip bots and automation users
            if login.lower() in bots or '[bot]' in login.lower():
                continue

            contributors_data[login]['login'] = login
            contributors_data[login]['avatar_url'] = contributor['avatar_url']
            contributors_data[login]['html_url'] = contributor['html_url']
            contributors_data[login]['total_commits'] += contributor['contributions']

            if repo_name not in contributors_data[login]['repos']:
                contributors_data[login]['repos'].append(repo_name)

    # Convert to list and sort by total commits (descending)
    contributors_list = list(contributors_data.values())
    contributors_list.sort(key=lambda x: x['total_commits'], reverse=True)

    return contributors_list


def generate_markdown(contributors, org_name):
    """Generate Markdown for contributors."""
    markdown = "# üõ†Ô∏è Soplang Contributors\n\n"
    markdown += "This file is automatically generated by the [sopCredits](https://github.com/soplang/sopCredits) GitHub Action.\n\n"
    markdown += f"*Last updated: {datetime.utcnow().strftime('%Y-%m-%d %H:%M')} UTC*\n\n"

    # Table header
    markdown += "| Avatar | Contributor | Commits | Repositories |\n"
    markdown += "| :----: | :---------- | :-----: | :----------- |\n"

    # Add contributors to table
    for i, contributor in enumerate(contributors):
        # Add medal emoji for top 3 contributors
        prefix = ""
        if i == 0:
            prefix = "ü•á "
        elif i == 1:
            prefix = "ü•à "
        elif i == 2:
            prefix = "ü•â "

        # Avatar
        markdown += f"| <img src=\"{contributor['avatar_url']}\" width=\"40\"> "
        # Name with link to profile
        markdown += f"| {prefix}[{contributor['login']}]({contributor['html_url']}) "
        # Total commits
        markdown += f"| {contributor['total_commits']} "

        # Repositories contributed to
        repo_links = [
            f"[{repo}](https://github.com/{org_name}/{repo})" for repo in contributor['repos']]
        markdown += f"| {', '.join(repo_links)} |\n"

    return markdown


def main():
    """Main function to generate README.md file."""
    token = get_github_token()
    org_name = "soplang"

    try:
        print("Starting to collect contributor data...")
        contributors = aggregate_contributor_data(org_name, token)
        print(f"Found {len(contributors)} contributors")

        markdown = generate_markdown(contributors, org_name)

        # Write the markdown to README.md
        print("Writing README.md...")
        with open('README.md', 'w') as file:
            file.write(markdown)

        print("README.md generated successfully")

    except Exception as e:
        print(f"Error: {e}")
        exit(1)


if __name__ == "__main__":
    main()
